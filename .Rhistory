# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
songs <- read.csv("Spotify_Youtube.csv")
d.heart <- read.csv("heart.csv")
summary(d.heart)
training_set_size <- floor(0.9 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
library(GGally)
library(caret)
library(pROC)
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
set.seed(25)
library(GGally)
library(caret)
library(pROC)
d.heart <- read.csv("heart.csv")
training_set_size <- floor(0.9 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
set.seed(25)
training_set_size <- floor(0.9 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
```{r}
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
set.seed(25)
library(GGally)
library(caret)
library(pROC)
d.heart <- read.csv("heart.csv")
summary(d.heart)
ggpairs(d.heart)
training_set_size <- floor(0.9 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
```{r}
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
training_set_size <- floor(0.8 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
```{r}
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.6, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.4, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegPredictionClassified <- ifelse(logRegPrediction > 0.3, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
logRegPredictionClassified <- ifelse(logRegPrediction > 0.3, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegPredictionClassified <- ifelse(logRegPrediction > 0.25, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.55, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegPredictionClassified <- ifelse(logRegPrediction > 0.58, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
training_set_size <- floor(0.7 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
```{r}
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
training_set_size <- floor(0.8 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
```{r}
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegModel$coefficients
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
rm(list=ls())
set.seed(25)
library(GGally)
library(caret)
library(pROC)
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
d.heart <- read.csv("heart.csv")
training_set_size <- floor(0.8 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
set.seed(25)
library(GGally)
library(caret)
library(pROC)
training_set_size <- floor(0.8 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
set
set
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
rm(list=ls())
set.seed(25)
library(GGally)
library(caret)
library(pROC)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
rm(list=ls())
set.seed(25)
library(GGally)
library(caret)
library(pROC)
```{r}
d.heart <- read.csv("heart.csv")
summary(d.heart)
training_set_size <- floor(0.8 * nrow(d.heart))
train_ind <- sample(seq_len(nrow(d.heart)), size = training_set_size)
train <- d.heart[train_ind, ]
test <- d.heart[-train_ind, ]
```{r}
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass
)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.7, 1, 0)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.4, 1, 0)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.01, 1, 0)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.1, 1, 0)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.3, 1, 0)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegPredictionClassified <- ifelse(logRegPrediction > 0.2, 1, 0)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegPredictionClassified <- ifelse(logRegPrediction > 0.25, 1, 0)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.25, 1, 0) #0.25 gir cutoff sens:
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.2, 1, 0) #0.25 gir cutoff sens:
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegPredictionClassified <- ifelse(logRegPrediction > 0.3, 1, 0) #0.2 gir sens: 0.96, spec:0.61
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegModel <- glm(HeartDisease ~ . - HeartDisease, data = train, family = "binomial")
logRegPrediction <- predict(logRegModel, test, type="response")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.5, 1, 0)
table(logRegPredictionClassified)
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$table)
print(logRegConfusionMatrix$byClass)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
logRegPredictionClassified <- ifelse(logRegPrediction > 0.3, 1, 0) #0.2 gir sens: 0.96, spec:0.61
logRegConfusionMatrix <- confusionMatrix(data=as.factor(logRegPredictionClassified),
reference=as.factor(test$HeartDisease),
positive = '1')
print(logRegConfusionMatrix$byClass)
logRegROC=roc(test$HeartDisease, logRegPredictionClassified)
plot(logRegROC,main="ROC curve -- Logistic Regression")
```{r}
logRegModel$coefficients
?confusionMatrix
??confusionMatrix
d.heart <- read.csv("heart.csv")
summary(d.heart)
dim d.heart
dim (d.heart)
head(d.heart, 3)
ggpairs(d.heart)
dim (d.heart)
summary(d.heart)
d.heart$Sex <- factor(d.heart$Sex)
summary(d.heart)
?d.heart
d.heart <- read.csv("heart.csv")
d.heart$Sex <- factor(d.heart$Sex)
d.heart$ChestPainType <- factor(d.heart$ChestPainType)
d.heart$FastingBS <- factor(d.heart$FastingBS)
d.heart$RestingECG <- factor(d.heart$RestingECG)
d.heart$ExerciseAngina <- factor(d.heart$ExerciseAngina)
d.heart$ST_Slope <- factor(d.heart$ST_Slope)
d.heart$HeartDisease <- factor(d.heart$HeartDisease)
dim (d.heart)
summary(d.heart)
ggpairs(d.heart)
# Chunk 1: setup
library(knitr)
knitr::opts_chunk$set(echo = TRUE,tidy=TRUE,message=FALSE,warning=FALSE,strip.white=TRUE,prompt=FALSE,
cache=TRUE, size="scriptsize",fig.width=4, fig.height=3,fig.align = "center")
# Chunk 2
library("knitr")
library("rmarkdown")
library(GGally)
library(caret)
library(pROC)
# Chunk 3
heart <- read.csv("heart.csv")
heart$Sex <- factor(heart$Sex)
heart$ChestPainType <- factor(heart$ChestPainType)
heart$FastingBS <- factor(heart$FastingBS)
heart$RestingECG <- factor(heart$RestingECG)
heart$ExerciseAngina <- factor(heart$ExerciseAngina)
heart$ST_Slope <- factor(heart$ST_Slope)
heart$HeartDisease <- factor(heart$HeartDisease)
# Chunk 4
dim (heart)
summary(heart)
# Chunk 5
ggpairs(heart)
```{r, fig.cap= "pairplot"}
ggpairs(heart)
library(tidyr)
detach("package:tidyr", unload = TRUE)
library(formatR)
install.packages("formatR")
install.packages("pdflatex")
